
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// 1/21/2003 9:26:55 AM
//----------------------------------------------------

using System;
namespace simple_calc {

using CUP.runtime;

///<summary>CUP v0.10k generated parser.</summary>
///<version>1/21/2003 9:26:55 AM</version>
///
public class parser : CUP.runtime.lr_parser {

  /** Default constructor. */
  public parser() : base() {}

  /** Constructor which sets the default scanner. */
  public parser(CUP.runtime.Scanner s) : base(s) {}

  /** Production table. */
  private static String[] _strProductionTable = new String[] {
    "\x0000\x000d\x0000\x0002\x0003\x0004\x0000\x0002\x0002\x0004\x0000\x0002\x0003" +
    "\x0003\x0000\x0002\x0006\x0002\x0000\x0002\x0004\x0005\x0000\x0002\x0005\x0005" +
    "\x0000\x0002\x0005\x0005\x0000\x0002\x0005\x0005\x0000\x0002\x0005\x0005\x0000" +
    "\x0002\x0005\x0005\x0000\x0002\x0005\x0003\x0000\x0002\x0005\x0004\x0000\x0002" +
    "\x0005\x0005" };
  protected static readonly short[][] _production_table  = CUP.runtime.lr_parser.unpackFromStrings(_strProductionTable);

  /** Access to production table. */
  public override short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  private static String[] _strActionTable = new String[] {
    "\x0000\x0018\x0000\x0008\x0006\x0004\x000b\x0009\x000d\x0008\x0001\x0002\x0000" +
    "\x0008\x0006\x0004\x000b\x0009\x000d\x0008\x0001\x0002\x0000\x000a\x0002\x0019" +
    "\x0006\x0004\x000b\x0009\x000d\x0008\x0001\x0002\x0000\x000e\x0004\ufffe\x0005" +
    "\x000f\x0006\x0010\x0007\x000b\x0008\x000d\x0009\x000c\x0001\x0002\x0000\x000a" +
    "\x0002\uffff\x0006\uffff\x000b\uffff\x000d\uffff\x0001\x0002\x0000\x0010\x0004" +
    "\ufff7\x0005\ufff7\x0006\ufff7\x0007\ufff7\x0008\ufff7\x0009\ufff7\x000c\ufff7" +
    "\x0001\x0002\x0000\x0008\x0006\x0004\x000b\x0009\x000d\x0008\x0001\x0002\x0000" +
    "\x000e\x0005\x000f\x0006\x0010\x0007\x000b\x0008\x000d\x0009\x000c\x000c\x000e" +
    "\x0001\x0002\x0000\x0008\x0006\x0004\x000b\x0009\x000d\x0008\x0001\x0002\x0000" +
    "\x0008\x0006\x0004\x000b\x0009\x000d\x0008\x0001\x0002\x0000\x0008\x0006\x0004" +
    "\x000b\x0009\x000d\x0008\x0001\x0002\x0000\x0010\x0004\ufff5\x0005\ufff5\x0006" +
    "\ufff5\x0007\ufff5\x0008\ufff5\x0009\ufff5\x000c\ufff5\x0001\x0002\x0000\x0008" +
    "\x0006\x0004\x000b\x0009\x000d\x0008\x0001\x0002\x0000\x0008\x0006\x0004\x000b" +
    "\x0009\x000d\x0008\x0001\x0002\x0000\x0010\x0004\ufffb\x0005\ufffb\x0006\ufffb" +
    "\x0007\x000b\x0008\x000d\x0009\x000c\x000c\ufffb\x0001\x0002\x0000\x0010\x0004" +
    "\ufffc\x0005\ufffc\x0006\ufffc\x0007\x000b\x0008\x000d\x0009\x000c\x000c\ufffc" +
    "\x0001\x0002\x0000\x0010\x0004\ufff9\x0005\ufff9\x0006\ufff9\x0007\ufff9\x0008" +
    "\ufff9\x0009\ufff9\x000c\ufff9\x0001\x0002\x0000\x0010\x0004\ufff8\x0005\ufff8" +
    "\x0006\ufff8\x0007\ufff8\x0008\ufff8\x0009\ufff8\x000c\ufff8\x0001\x0002\x0000" +
    "\x0010\x0004\ufffa\x0005\ufffa\x0006\ufffa\x0007\ufffa\x0008\ufffa\x0009\ufffa" +
    "\x000c\ufffa\x0001\x0002\x0000\x0004\x0004\x0017\x0001\x0002\x0000\x000a\x0002" +
    "\ufffd\x0006\ufffd\x000b\ufffd\x000d\ufffd\x0001\x0002\x0000\x000a\x0002\x0001" +
    "\x0006\x0001\x000b\x0001\x000d\x0001\x0001\x0002\x0000\x0004\x0002\x0000\x0001" +
    "\x0002\x0000\x0010\x0004\ufff6\x0005\ufff6\x0006\ufff6\x0007\ufff6\x0008\ufff6" +
    "\x0009\ufff6\x000c\ufff6\x0001\x0002" };
  protected static short[][] _action_table = CUP.runtime.lr_parser.unpackFromStrings(_strActionTable);

  /** Access to parse-action table. */
  public override short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  private static String[] _strGotoTable = new String[] {
    "\x0000\x0018\x0000\x0008\x0003\x0004\x0004\x0006\x0005\x0005\x0001\x0001\x0000" +
    "\x0004\x0005\x0019\x0001\x0001\x0000\x0006\x0004\x0017\x0005\x0005\x0001\x0001" +
    "\x0000\x0004\x0006\x0015\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001" +
    "\x0001\x0000\x0004\x0005\x0009\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0004" +
    "\x0005\x0014\x0001\x0001\x0000\x0004\x0005\x0013\x0001\x0001\x0000\x0004\x0005" +
    "\x0012\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0004\x0005\x0011\x0001\x0001" +
    "\x0000\x0004\x0005\x0010\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001" +
    "\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001" +
    "\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000\x0002\x0001\x0001\x0000" +
    "\x0002\x0001\x0001\x0000\x0002\x0001\x0001" };
  protected static readonly short[][] _reduce_table = CUP.runtime.lr_parser.unpackFromStrings(_strGotoTable);

  /** Access to <code>reduce_goto</code> table. */
  public override short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_parser_actions action_obj;

  /** Action encapsulation object initializer. */
  protected override void init_actions()
    {
      action_obj = new CUP_parser_actions(this);
    }

  /** Invoke a user supplied parse action. */
  public override CUP.runtime.Symbol do_action(
    int                        act_num,
    CUP.runtime.lr_parser parser,
    CUP.runtime.SymbolStack   stack,
    int                        top)
  {
    /* call code in generated class */
    return action_obj.CUP_parser_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public override int start_state() {return 0;}
  /** Indicates start production. */
  public override int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public override int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public override int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
public class CUP_parser_actions {
  private parser parser;

  /** Constructor */
  public CUP_parser_actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public CUP.runtime.Symbol CUP_parser_do_action(
    int                        CUP_parser_act_num,
    CUP.runtime.lr_parser CUP_parser_parser,
    CUP.runtime.SymbolStack            CUP_parser_stack,
    int                        CUP_parser_top)
    {
      /* Symbol object for return from actions */
      CUP.runtime.Symbol CUP_parser_result;

      /* select the action based on the action number */
      switch (CUP_parser_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= LPAREN expr RPAREN 
            {
              int RESULT ;
		int eleft = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-1)).left;
		int eright = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-1)).right;
		int e = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-1)).Value;
		 RESULT = e; 
              CUP_parser_result = new CUP.runtime.Symbol(3/*expr*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= MINUS expr 
            {
              int RESULT ;
		int eleft = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).left;
		int eright = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right;
		int e = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-0)).Value;
		 RESULT = -e; 
              CUP_parser_result = new CUP.runtime.Symbol(3/*expr*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-1)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= NUMBER 
            {
              int RESULT ;
		int nleft = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).left;
		int nright = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right;
		int n = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-0)).Value;
		 RESULT = n; 
              CUP_parser_result = new CUP.runtime.Symbol(3/*expr*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr MOD expr 
            {
              int RESULT ;
		int e1left = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left;
		int e1right = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).right;
		int e1 = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-2)).Value;
		int e2left = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).left;
		int e2right = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right;
		int e2 = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-0)).Value;
		 RESULT = e1 % e2; 
              CUP_parser_result = new CUP.runtime.Symbol(3/*expr*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr DIVIDE expr 
            {
              int RESULT ;
		int e1left = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left;
		int e1right = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).right;
		int e1 = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-2)).Value;
		int e2left = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).left;
		int e2right = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right;
		int e2 = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-0)).Value;
		 RESULT = e1 / e2; 
              CUP_parser_result = new CUP.runtime.Symbol(3/*expr*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr TIMES expr 
            {
              int RESULT ;
		int e1left = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left;
		int e1right = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).right;
		int e1 = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-2)).Value;
		int e2left = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).left;
		int e2right = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right;
		int e2 = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-0)).Value;
		 RESULT = e1 * e2; 
              CUP_parser_result = new CUP.runtime.Symbol(3/*expr*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MINUS expr 
            {
              int RESULT ;
		int e1left = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left;
		int e1right = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).right;
		int e1 = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-2)).Value;
		int e2left = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).left;
		int e2right = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right;
		int e2 = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-0)).Value;
		 RESULT = e1 - e2; 
              CUP_parser_result = new CUP.runtime.Symbol(3/*expr*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr PLUS expr 
            {
              int RESULT ;
		int e1left = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left;
		int e1right = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).right;
		int e1 = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-2)).Value;
		int e2left = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).left;
		int e2right = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right;
		int e2 = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-0)).Value;
		 RESULT = e1 + e2; 
              CUP_parser_result = new CUP.runtime.Symbol(3/*expr*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= expr NT$0 SEMI 
            {
              object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-1)).Value != null )
                RESULT = (object) ((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-1)).Value;
		int eleft = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left;
		int eright = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).right;
		int e = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-2)).Value;

              CUP_parser_result = new CUP.runtime.Symbol(2/*expr_part*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-2)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT = null;
		int eleft = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).left;
		int eright = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right;
		int e = (int)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-0)).Value;
 RESULT = e; Console.WriteLine("= " + e); 
              CUP_parser_result = new CUP.runtime.Symbol(4/*NT$0*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              object RESULT = null;
		int eleft = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).left;
		int eright = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right;
		object e = (object)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-0)).Value;
		 RESULT = e; 
              CUP_parser_result = new CUP.runtime.Symbol(1/*expr_list*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-1)).left;
		int start_valright = ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-1)).right;
		object start_val = (object)((CUP.runtime.Symbol) CUP_parser_stack.Peek(CUP_parser_top-1)).Value;
		RESULT = start_val;
              CUP_parser_result = new CUP.runtime.Symbol(0/*$START*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-1)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP_parser_parser.done_parsing();
          return CUP_parser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              object RESULT = null;

              CUP_parser_result = new CUP.runtime.Symbol(1/*expr_list*/, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-1)).left, ((CUP.runtime.Symbol)CUP_parser_stack.Peek(CUP_parser_top-0)).right, RESULT);
            }
          return CUP_parser_result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
